import React, { useEffect, useState } from "react";
import {
  Table,
  Tag,
  Space,
  Button,
  Input,
  Spin,
  Modal,
  Form,
  Select,
  Switch,
} from "antd";
import {
  HomeOutlined,
  WifiOutlined,
  CarOutlined,
  FireOutlined,
  CoffeeOutlined,
  ShoppingOutlined,
  ThunderboltOutlined,
  KeyOutlined,
  HeartOutlined,
  CrownOutlined,
  GiftOutlined,
  VideoCameraOutlined,
  SafetyOutlined,
  DollarOutlined,
  FileTextOutlined,
  ClockCircleOutlined,
  SmileOutlined,
  EnvironmentOutlined,
  ShopOutlined,
  SunOutlined,
  BuildOutlined,
  BankOutlined,
  RestOutlined,
  SyncOutlined,
  DashboardOutlined,
  PoweroffOutlined,
  SearchOutlined,
  EditOutlined,
  ReloadOutlined,
  PlusOutlined,
  DeleteOutlined,
  ApartmentOutlined,
} from "@ant-design/icons";
import * as Icons from "@ant-design/icons";
import { useAmenities } from "../../../hooks/useAmenities";
import useMessage from "../../../hooks/useMessage";
import "./AmenityManagement.scss";

/* üé® Danh s√°ch icon v√† ti·ªán √≠ch g·ª£i √Ω s·∫µn */
const ICON_OPTIONS = [
  {
    value: "HomeOutlined",
    icon: <HomeOutlined />,
    label: "N·ªôi th·∫•t / Ph√≤ng ƒë·∫ßy ƒë·ªß",
  },
  { value: "RestOutlined", icon: <RestOutlined />, label: "Nh√† v·ªá sinh ri√™ng" },
  { value: "BankOutlined", icon: <BankOutlined />, label: "Ban c√¥ng / C·ª≠a s·ªï" },
  {
    value: "FireOutlined",
    icon: <FireOutlined />,
    label: "M√°y l·∫°nh / B√¨nh n√≥ng l·∫°nh",
  },
  { value: "SyncOutlined", icon: <SyncOutlined />, label: "M√°y gi·∫∑t" },
  {
    value: "ThunderboltOutlined",
    icon: <ThunderboltOutlined />,
    label: "ƒêi·ªán / N∆∞·ªõc ri√™ng",
  },
  {
    value: "DashboardOutlined",
    icon: <DashboardOutlined />,
    label: "ƒê·ªìng h·ªì ƒëi·ªán n∆∞·ªõc ri√™ng",
  },
  {
    value: "PoweroffOutlined",
    icon: <PoweroffOutlined />,
    label: "·ªî c·∫Øm ƒëi·ªán",
  },
  { value: "WifiOutlined", icon: <WifiOutlined />, label: "Wi-Fi mi·ªÖn ph√≠" },
  {
    value: "VideoCameraOutlined",
    icon: <VideoCameraOutlined />,
    label: "Camera an ninh",
  },
  { value: "CarOutlined", icon: <CarOutlined />, label: "Ch·ªó ƒë·ªÉ xe" },
  { value: "SafetyOutlined", icon: <SafetyOutlined />, label: "B·∫£o v·ªá 24/7" },
  {
    value: "KeyOutlined",
    icon: <KeyOutlined />,
    label: "Kh√≥a ri√™ng / v√¢n tay",
  },
  {
    value: "CoffeeOutlined",
    icon: <CoffeeOutlined />,
    label: "Khu n·∫•u ƒÉn / b·∫øp ri√™ng",
  },
  {
    value: "SunOutlined",
    icon: <SunOutlined />,
    label: "S√¢n ph∆°i / √Ånh s√°ng t·ªët",
  },
  {
    value: "BuildOutlined",
    icon: <BuildOutlined />,
    label: "S√¢n th∆∞·ª£ng / Kh√¥ng gian chung",
  },
  {
    value: "EnvironmentOutlined",
    icon: <EnvironmentOutlined />,
    label: "G·∫ßn tr·∫°m xe / b·∫øn bus",
  },
  {
    value: "ShopOutlined",
    icon: <ShopOutlined />,
    label: "G·∫ßn ch·ª£ / c·ª≠a h√†ng",
  },
  {
    value: "ShoppingOutlined",
    icon: <ShoppingOutlined />,
    label: "G·∫ßn si√™u th·ªã / ti·ªán l·ª£i",
  },
  {
    value: "CrownOutlined",
    icon: <CrownOutlined />,
    label: "G·∫ßn tr∆∞·ªùng ƒë·∫°i h·ªçc",
  },
  {
    value: "DollarOutlined",
    icon: <DollarOutlined />,
    label: "Gi√° t·ªët / ƒê·∫∑t c·ªçc th·∫•p",
  },
  {
    value: "FileTextOutlined",
    icon: <FileTextOutlined />,
    label: "H·ª£p ƒë·ªìng r√µ r√†ng",
  },
  {
    value: "ClockCircleOutlined",
    icon: <ClockCircleOutlined />,
    label: "Thu√™ ng·∫Øn h·∫°n / linh ho·∫°t",
  },
  {
    value: "SmileOutlined",
    icon: <SmileOutlined />,
    label: "Ch·ªß nh√† th√¢n thi·ªán",
  },
  {
    value: "HeartOutlined",
    icon: <HeartOutlined />,
    label: "Khu v·ª±c y√™n tƒ©nh / th√¢n thi·ªán",
  },
  {
    value: "GiftOutlined",
    icon: <GiftOutlined />,
    label: "∆Øu ƒë√£i / khuy·∫øn m√£i",
  },
];

/* üß© Render icon t·ª´ t√™n DB */
const renderIcon = (iconName) => {
  const IconComponent = Icons[iconName];
  return IconComponent ? (
    <IconComponent style={{ fontSize: 18 }} />
  ) : (
    <ApartmentOutlined style={{ color: "#aaa" }} />
  );
};

const AmenityManagement = () => {
  const [searchValue, setSearchValue] = useState("");
  const [selectedRowKeys, setSelectedRowKeys] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [editRecord, setEditRecord] = useState(null);

  const [form] = Form.useForm();
  const [editForm] = Form.useForm();
  const showMsg = useMessage();

  const {
    amenities,
    loading,
    fetchAllAmenities,
    createAmenity,
    deleteAmenity,
    updateAmenity,
  } = useAmenities({ autoFetch: true });

  useEffect(() => {
    fetchAllAmenities();
  }, []);

  const filteredAmenities = amenities.filter(
    (item) =>
      item.name?.toLowerCase().includes(searchValue.toLowerCase()) ||
      item.icon?.toLowerCase().includes(searchValue.toLowerCase())
  );

  const openAddModal = () => {
    form.resetFields();
    setIsModalOpen(true);
  };

  /* ‚ûï Th√™m ti·ªán √≠ch */
  const handleAddAmenity = async () => {
    try {
      const { icon } = await form.validateFields();
      const selected = ICON_OPTIONS.find((i) => i.value === icon);
      if (!selected) return showMsg.error("Ti·ªán √≠ch kh√¥ng h·ª£p l·ªá!");

      const exists = amenities.some((a) => a.icon === selected.value);
      if (exists) return showMsg.warning("Ti·ªán √≠ch n√†y ƒë√£ t·ªìn t·∫°i!");

      const payload = {
        name: selected.label,
        icon: selected.value,
        active: true,
      };
      await createAmenity(payload);

      showMsg.success("‚úÖ ƒê√£ th√™m ti·ªán √≠ch m·ªõi!");
      setIsModalOpen(false);
      fetchAllAmenities();
    } catch (err) {
      if (!err.errorFields) {
        console.error(err);
        showMsg.error("Kh√¥ng th·ªÉ th√™m ti·ªán √≠ch!");
      }
    }
  };

  /* ‚úèÔ∏è M·ªü modal ch·ªânh s·ª≠a */
  const openEditModal = (record) => {
    setEditRecord(record);
    editForm.setFieldsValue({
      name: record.name,
      active: record.active,
    });
    setIsEditModalOpen(true);
  };

  /* üíæ C·∫≠p nh·∫≠t ti·ªán √≠ch */
  const handleUpdateAmenity = async () => {
    try {
      const values = await editForm.validateFields();
      await updateAmenity(editRecord.id, values);
      showMsg.success("ƒê√£ c·∫≠p nh·∫≠t ti·ªán √≠ch!");
      setIsEditModalOpen(false);
      fetchAllAmenities();
    } catch (err) {
      console.error("L·ªói c·∫≠p nh·∫≠t ti·ªán √≠ch:", err);
      showMsg.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ti·ªán √≠ch!");
    }
  };

  /* üóëÔ∏è X√≥a ti·ªán √≠ch */
  const handleDeleteSelected = async () => {
    try {
      await Promise.all(selectedRowKeys.map((id) => deleteAmenity(id)));
      showMsg.success(`ƒê√£ x√≥a ${selectedRowKeys.length} ti·ªán √≠ch.`);
      setSelectedRowKeys([]);
      setIsDeleteModalOpen(false);
      fetchAllAmenities();
    } catch (err) {
      showMsg.error("Kh√¥ng th·ªÉ x√≥a ti·ªán √≠ch.");
    }
  };

  /* üßæ B·∫£ng */
  const columns = [
    {
      title: "Ti·ªán √≠ch",
      dataIndex: "name",
      key: "name",
      render: (text, record) => (
        <Space>
          {renderIcon(record.icon)}
          <span>{text}</span>
        </Space>
      ),
    },
    {
      title: "M√£ icon",
      dataIndex: "icon",
      key: "icon",
      render: (icon) => <Tag color="blue">{icon}</Tag>,
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "active",
      key: "active",
      render: (active) => (
        <Tag color={active ? "green" : "red"}>
          {active ? "Ho·∫°t ƒë·ªông" : "T·∫°m d·ª´ng"}
        </Tag>
      ),
    },
    {
      title: "Thao t√°c",
      key: "action",
      render: (_, record) => (
        <Space>
          <Button
            type="link"
            icon={<EditOutlined />}
            onClick={() => openEditModal(record)}
          >
            S·ª≠a
          </Button>
        </Space>
      ),
    },
  ];

  return (
    <div className="amenity-management">
      <div className="amenity-header">
        <Input
          placeholder="T√¨m ki·∫øm ti·ªán √≠ch..."
          prefix={<SearchOutlined />}
          value={searchValue}
          onChange={(e) => setSearchValue(e.target.value)}
          className="search-input"
        />
        <div className="actions">
          <Button
            icon={<ReloadOutlined />}
            onClick={fetchAllAmenities}
            loading={loading}
            className="refresh-btn"
          >
            L√†m m·ªõi
          </Button>
          <Button type="primary" icon={<PlusOutlined />} onClick={openAddModal}>
            Th√™m ti·ªán √≠ch
          </Button>
          <Button
            danger
            icon={<DeleteOutlined />}
            disabled={!selectedRowKeys.length}
            onClick={() => setIsDeleteModalOpen(true)}
          >
            X√≥a ƒë√£ ch·ªçn
          </Button>
        </div>
      </div>

      {loading ? (
        <div className="loading">
          <Spin tip="ƒêang t·∫£i danh s√°ch ti·ªán √≠ch..." />
        </div>
      ) : (
        <Table
          rowSelection={{
            selectedRowKeys,
            onChange: setSelectedRowKeys,
          }}
          columns={columns}
          dataSource={filteredAmenities}
          rowKey="id"
          pagination={{ pageSize: 10 }}
        />
      )}

      {/* ‚ûï Modal th√™m */}
      <Modal
        title="Th√™m ti·ªán √≠ch m·ªõi"
        open={isModalOpen}
        onCancel={() => setIsModalOpen(false)}
        onOk={handleAddAmenity}
        okText="Th√™m"
        cancelText="H·ªßy"
        confirmLoading={loading}
      >
        <Form form={form} layout="vertical">
          <Form.Item
            label="Ch·ªçn ti·ªán √≠ch"
            name="icon"
            rules={[{ required: true, message: "Vui l√≤ng ch·ªçn ti·ªán √≠ch!" }]}
          >
            <Select
              placeholder="Ch·ªçn ti·ªán √≠ch..."
              optionLabelProp="label"
              showSearch
              filterOption={(input, option) =>
                option?.label?.toLowerCase().includes(input.toLowerCase())
              }
            >
              {ICON_OPTIONS.map((item) => (
                <Select.Option
                  key={item.value}
                  value={item.value}
                  label={item.label}
                >
                  <div
                    style={{ display: "flex", alignItems: "center", gap: 10 }}
                  >
                    {item.icon} <span>{item.label}</span>
                  </div>
                </Select.Option>
              ))}
            </Select>
          </Form.Item>
        </Form>
      </Modal>

      {/* ‚úèÔ∏è Modal ch·ªânh s·ª≠a */}
      <Modal
        title="Ch·ªânh s·ª≠a ti·ªán √≠ch"
        open={isEditModalOpen}
        onCancel={() => setIsEditModalOpen(false)}
        onOk={handleUpdateAmenity}
        okText="L∆∞u"
        cancelText="H·ªßy"
        confirmLoading={loading}
      >
        <Form form={editForm} layout="vertical">
          <Form.Item label="T√™n ti·ªán √≠ch" name="name">
            <Input disabled />
          </Form.Item>
          <Form.Item
            label="Tr·∫°ng th√°i ho·∫°t ƒë·ªông"
            name="active"
            valuePropName="checked"
          >
            <Switch checkedChildren="Ho·∫°t ƒë·ªông" unCheckedChildren="T·∫°m d·ª´ng" />
          </Form.Item>
        </Form>
      </Modal>

      {/* ‚ùå Modal x√≥a */}
      <Modal
        title="X√°c nh·∫≠n x√≥a ti·ªán √≠ch"
        open={isDeleteModalOpen}
        onCancel={() => setIsDeleteModalOpen(false)}
        onOk={handleDeleteSelected}
        okText="X√≥a"
        cancelText="H·ªßy"
        okButtonProps={{ danger: true }}
        confirmLoading={loading}
      >
        <p>
          B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a <strong>{selectedRowKeys.length}</strong>{" "}
          ti·ªán √≠ch ƒë√£ ch·ªçn kh√¥ng?
        </p>
      </Modal>
    </div>
  );
};

export default AmenityManagement;
