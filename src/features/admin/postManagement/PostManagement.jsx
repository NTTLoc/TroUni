import React, { useEffect, useState } from "react";
import {
  Table,
  Tag,
  Space,
  Button,
  Input,
  Spin,
  message,
  Popconfirm,
} from "antd";
import {
  SearchOutlined,
  ReloadOutlined,
  EditOutlined,
  DeleteOutlined,
} from "@ant-design/icons";
import { getAllRoomsApi } from "../../../services/postApi";
import "./PostManagement.scss";

const PostManagement = () => {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [searchValue, setSearchValue] = useState("");
  const [selectedRowKeys, setSelectedRowKeys] = useState([]);

  // üß≠ G·ªçi API l·∫•y danh s√°ch b√†i ƒëƒÉng
  const fetchPosts = async () => {
    setLoading(true);
    try {
      const res = await getAllRoomsApi();
      const data = res.data?.content || res.data || [];

      // ƒê·ªãnh d·∫°ng l·∫°i d·ªØ li·ªáu
      setPosts(
        data.map((item, idx) => ({
          key: item.id || idx,
          title: item.title || item.name || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ",
          author: item.ownerName || item.user?.fullName || "Ch∆∞a r√µ",
          status: item.status || "Ch·ªù duy·ªát",
        }))
      );
    } catch (err) {
      console.error("L·ªói t·∫£i danh s√°ch b√†i ƒëƒÉng:", err);
      message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i ƒëƒÉng!");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPosts();
  }, []);

  // üßÆ L·ªçc & t√¨m ki·∫øm
  const filteredPosts = posts.filter(
    (p) =>
      p.title?.toLowerCase().includes(searchValue.toLowerCase()) ||
      p.author?.toLowerCase().includes(searchValue.toLowerCase())
  );

  // Khi click v√†o d√≤ng
  const handleRowClick = (record) => {
    message.info(`Xem chi ti·∫øt: ${record.title}`);
    console.log("üìÑ Chi ti·∫øt b√†i ƒëƒÉng:", record);
  };

  // X√≥a nhi·ªÅu d√≤ng
  const handleDeleteSelected = () => {
    if (selectedRowKeys.length === 0) {
      message.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt b√†i ƒëƒÉng ƒë·ªÉ x√≥a.");
      return;
    }
    message.success(`ƒê√£ x√≥a ${selectedRowKeys.length} b√†i ƒëƒÉng.`);
    // TODO: G·ªçi API x√≥a th·∫≠t
  };

  // Render tr·∫°ng th√°i v·ªõi m√†u
  const renderStatusTag = (status) => {
    let color;
    switch (status) {
      case "ƒêang hi·ªÉn th·ªã":
      case "ACTIVE":
        color = "green";
        break;
      case "Ch·ªù duy·ªát":
      case "PENDING":
        color = "orange";
        break;
      case "ƒê√£ ·∫©n":
      case "HIDDEN":
        color = "volcano";
        break;
      case "B·ªã t·ª´ ch·ªëi":
      case "REJECTED":
        color = "red";
        break;
      default:
        color = "default";
    }
    return <Tag color={color}>{status}</Tag>;
  };

  // C·∫•u h√¨nh c·ªôt b·∫£ng
  const columns = [
    {
      title: "Ti√™u ƒë·ªÅ b√†i ƒëƒÉng",
      dataIndex: "title",
      key: "title",
      render: (text) => text || "‚Äî",
    },
    {
      title: "Ng∆∞·ªùi ƒëƒÉng",
      dataIndex: "author",
      key: "author",
      render: (text) => text || "Kh√¥ng r√µ",
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      filters: [
        { text: "ƒêang hi·ªÉn th·ªã", value: "ƒêang hi·ªÉn th·ªã" },
        { text: "Ch·ªù duy·ªát", value: "Ch·ªù duy·ªát" },
        { text: "ƒê√£ ·∫©n", value: "ƒê√£ ·∫©n" },
        { text: "B·ªã t·ª´ ch·ªëi", value: "B·ªã t·ª´ ch·ªëi" },
      ],
      onFilter: (value, record) => record.status === value,
      render: (status) => renderStatusTag(status),
    },
    {
      title: "Thao t√°c",
      key: "actions",
      render: (_, record) => (
        <Space>
          <Button type="link" icon={<EditOutlined />}>
            Ch·ªânh s·ª≠a
          </Button>
        </Space>
      ),
    },
  ];

  return (
    <div className="post-management">
      <div className="post-header">
        <Input
          placeholder="T√¨m ki·∫øm theo ti√™u ƒë·ªÅ ho·∫∑c ng∆∞·ªùi ƒëƒÉng..."
          prefix={<SearchOutlined />}
          value={searchValue}
          onChange={(e) => setSearchValue(e.target.value)}
          className="search-input"
        />
        <div style={{ display: "flex", gap: "8px" }}>
          <Button
            icon={<ReloadOutlined />}
            onClick={fetchPosts}
            loading={loading}
            className="refresh-btn"
          >
            L√†m m·ªõi
          </Button>

          <Popconfirm
            title="X√°c nh·∫≠n x√≥a b√†i ƒëƒÉng ƒë√£ ch·ªçn?"
            onConfirm={handleDeleteSelected}
            okText="X√≥a"
            cancelText="H·ªßy"
          >
            <Button
              danger
              icon={<DeleteOutlined />}
              disabled={selectedRowKeys.length === 0}
              className="delete-btn"
            >
              X√≥a ƒë√£ ch·ªçn
            </Button>
          </Popconfirm>
        </div>
      </div>

      {loading ? (
        <div className="loading">
          <Spin tip="ƒêang t·∫£i b√†i ƒëƒÉng..." />
        </div>
      ) : (
        <Table
          rowSelection={{
            selectedRowKeys,
            onChange: (keys) => setSelectedRowKeys(keys),
          }}
          columns={columns}
          dataSource={filteredPosts}
          pagination={{ pageSize: 10 }}
          onRow={(record) => ({
            onClick: () => handleRowClick(record),
            style: { cursor: "pointer" },
          })}
        />
      )}
    </div>
  );
};

export default PostManagement;
