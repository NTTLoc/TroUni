import React, { useEffect, useState } from "react";
import {
  Table,
  Tag,
  Space,
  Button,
  Input,
  Spin,
  Modal,
  Form,
  Select,
} from "antd";
import {
  SearchOutlined,
  ReloadOutlined,
  EditOutlined,
  DeleteOutlined,
} from "@ant-design/icons";
import {
  getAllUsersApi,
  updateUserApi,
  deleteUserApi,
} from "../../../services/userApi";
import "./UserManagement.scss";
import useMessage from "../../../hooks/useMessage";

const UserManagement = () => {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [searchValue, setSearchValue] = useState("");
  const [selectedRowKeys, setSelectedRowKeys] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [form] = Form.useForm();
  const message = useMessage();

  // üîπ L·∫•y danh s√°ch user
  const fetchUsers = async () => {
    setLoading(true);
    try {
      const res = await getAllUsersApi();
      setUsers(res.data || []);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫£i danh s√°ch ng∆∞·ªùi d√πng:", err);
      message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  // üîπ Hi·ªÉn th·ªã nh√£n vai tr√≤
  const renderRoleLabel = (role) => {
    switch (role) {
      case "ADMIN":
        return "Qu·∫£n tr·ªã vi√™n";
      case "MANAGER":
        return "Qu·∫£n l√Ω";
      case "LANDLORD":
        return "Ch·ªß tr·ªç";
      case "STUDENT":
        return "Ng∆∞·ªùi d√πng";
      default:
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  // üîπ L·ªçc ng∆∞·ªùi d√πng theo t√¨m ki·∫øm
  const filteredUsers = users.filter(
    (user) =>
      user.fullName?.toLowerCase().includes(searchValue.toLowerCase()) ||
      user.email?.toLowerCase().includes(searchValue.toLowerCase())
  );

  // üîπ Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng
  const handleEdit = (user) => {
    setEditingUser(user);
    form.setFieldsValue({
      username: user.username,
      email: user.email,
      role: user.role,
      status: user.status,
    });
    setIsModalOpen(true);
  };

  const handleUpdate = async () => {
    try {
      const values = await form.validateFields();
      setLoading(true);
      await updateUserApi(editingUser.id, values);
      message.success("C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng!");
      setIsModalOpen(false);
      fetchUsers();
    } catch (err) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t:", err);
      message.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng");
    } finally {
      setLoading(false);
    }
  };

  // üîπ M·ªü modal x√°c nh·∫≠n x√≥a
  const openDeleteModal = () => {
    if (selectedRowKeys.length === 0) {
      message.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a.");
      return;
    }
    setIsDeleteModalOpen(true);
  };

  // üîπ Th·ª±c hi·ªán x√≥a ng∆∞·ªùi d√πng
  const handleDeleteSelected = async () => {
    setLoading(true);
    try {
      await Promise.all(selectedRowKeys.map((id) => deleteUserApi(id)));
      message.success(`ƒê√£ x√≥a ${selectedRowKeys.length} ng∆∞·ªùi d√πng.`);
      setSelectedRowKeys([]);
      setIsDeleteModalOpen(false);
      fetchUsers();
    } catch (err) {
      console.error("‚ùå L·ªói khi x√≥a ng∆∞·ªùi d√πng:", err);
      message.error("Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  // üîπ C·∫•u h√¨nh b·∫£ng
  const columns = [
    {
      title: "T√™n ng∆∞·ªùi d√πng",
      dataIndex: "username",
      key: "username",
      render: (text) => text || "‚Äî",
    },
    {
      title: "Email",
      dataIndex: "email",
      key: "email",
    },
    {
      title: "Vai tr√≤",
      dataIndex: "role",
      key: "role",
      filters: [
        { text: "Ng∆∞·ªùi d√πng", value: "STUDENT" },
        { text: "Ch·ªß tr·ªç", value: "LANDLORD" },
        { text: "Qu·∫£n l√Ω", value: "MANAGER" },
        { text: "Qu·∫£n tr·ªã vi√™n", value: "ADMIN" },
      ],
      onFilter: (value, record) => record.role === value,
      render: (role) => {
        const colorMap = {
          ADMIN: "red",
          MANAGER: "purple",
          LANDLORD: "blue",
          STUDENT: "green",
        };
        return <Tag color={colorMap[role]}>{renderRoleLabel(role)}</Tag>;
      },
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      filters: [
        { text: "Ho·∫°t ƒë·ªông", value: "ACTIVE" },
        { text: "B·ªã kh√≥a", value: "LOCKED" },
        { text: "T·∫°m ƒë√¨nh ch·ªâ", value: "SUSPENDED" },
        { text: "ƒê√£ x√≥a", value: "DELETED" },
      ],
      onFilter: (value, record) => record.status === value,
      render: (status) => {
        const colorMap = {
          ACTIVE: "green",
          LOCKED: "orange",
          SUSPENDED: "purple",
          DELETED: "red",
        };

        const labelMap = {
          ACTIVE: "Ho·∫°t ƒë·ªông",
          LOCKED: "B·ªã kh√≥a",
          SUSPENDED: "T·∫°m ƒë√¨nh ch·ªâ",
          DELETED: "ƒê√£ x√≥a",
        };

        return <Tag color={colorMap[status]}>{labelMap[status]}</Tag>;
      },
    },
    {
      title: "Thao t√°c",
      key: "actions",
      render: (_, record) => (
        <Space>
          <Button
            type="link"
            icon={<EditOutlined />}
            onClick={() => handleEdit(record)}
          >
            Ch·ªânh s·ª≠a
          </Button>
        </Space>
      ),
    },
  ];

  return (
    <div className="user-management">
      <div className="user-header">
        <Input
          placeholder="T√¨m ki·∫øm theo t√™n ho·∫∑c email..."
          prefix={<SearchOutlined />}
          value={searchValue}
          onChange={(e) => setSearchValue(e.target.value)}
          className="search-input"
        />
        <div style={{ display: "flex", gap: "8px" }}>
          <Button
            icon={<ReloadOutlined />}
            onClick={fetchUsers}
            loading={loading}
            className="refresh-btn"
          >
            L√†m m·ªõi
          </Button>
          <Button
            danger
            icon={<DeleteOutlined />}
            disabled={selectedRowKeys.length === 0}
            className="delete-btn"
            onClick={openDeleteModal}
          >
            X√≥a ƒë√£ ch·ªçn
          </Button>
        </div>
      </div>

      {loading ? (
        <div className="loading">
          <Spin tip="ƒêang t·∫£i ng∆∞·ªùi d√πng..." />
        </div>
      ) : (
        <Table
          rowSelection={{
            selectedRowKeys,
            onChange: (keys) => setSelectedRowKeys(keys),
          }}
          columns={columns}
          dataSource={filteredUsers.map((u) => ({ ...u, key: u.id }))}
          pagination={{ pageSize: 10 }}
        />
      )}

      {/* Modal ch·ªânh s·ª≠a */}
      <Modal
        title="Ch·ªânh s·ª≠a ng∆∞·ªùi d√πng"
        open={isModalOpen}
        onCancel={() => setIsModalOpen(false)}
        onOk={handleUpdate}
        okText="L∆∞u thay ƒë·ªïi"
        cancelText="H·ªßy"
        confirmLoading={loading}
      >
        <Form form={form} layout="vertical">
          <Form.Item
            label="T√™n ng∆∞·ªùi d√πng"
            name="username"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi d√πng" },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            label="Email"
            name="email"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p email" },
              { type: "email", message: "Email kh√¥ng h·ª£p l·ªá" },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item label="Vai tr√≤" name="role" rules={[{ required: true }]}>
            <Select>
              <Select.Option value="STUDENT">Ng∆∞·ªùi d√πng</Select.Option>
              <Select.Option value="LANDLORD">Ch·ªß tr·ªç</Select.Option>
              <Select.Option value="MANAGER">Qu·∫£n l√Ω</Select.Option>
              <Select.Option value="ADMIN">Qu·∫£n tr·ªã vi√™n</Select.Option>
            </Select>
          </Form.Item>

          <Form.Item
            label="Tr·∫°ng th√°i"
            name="status"
            rules={[{ required: true }]}
          >
            <Select>
              <Select.Option value="ACTIVE">Ho·∫°t ƒë·ªông</Select.Option>
              <Select.Option value="LOCKED">B·ªã kh√≥a</Select.Option>
              <Select.Option value="SUSPENDED">T·∫°m ƒë√¨nh ch·ªâ</Select.Option>
            </Select>
          </Form.Item>
        </Form>
      </Modal>

      {/* üóëÔ∏è Modal x√°c nh·∫≠n x√≥a */}
      <Modal
        title="X√°c nh·∫≠n x√≥a ng∆∞·ªùi d√πng"
        open={isDeleteModalOpen}
        onOk={handleDeleteSelected}
        onCancel={() => setIsDeleteModalOpen(false)}
        okText="X√≥a"
        cancelText="H·ªßy"
        okButtonProps={{ danger: true }}
        confirmLoading={loading}
        centered
      >
        <p>
          B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a <strong>{selectedRowKeys.length}</strong>{" "}
          ng∆∞·ªùi d√πng ƒë√£ ch·ªçn kh√¥ng?
        </p>
        <p style={{ color: "gray", fontSize: "13px" }}>
          H√†nh ƒë·ªông n√†y s·∫Ω ƒë·∫∑t tr·∫°ng th√°i ng∆∞·ªùi d√πng th√†nh <b>DELETED</b>.
        </p>
      </Modal>
    </div>
  );
};

export default UserManagement;
