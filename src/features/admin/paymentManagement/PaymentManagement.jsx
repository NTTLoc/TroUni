import React, { useEffect, useState } from "react";
import { Table, Tag, Space, Button, Input, Spin, Modal } from "antd";
import { SearchOutlined, ReloadOutlined, EyeOutlined } from "@ant-design/icons";
import { getAllPaymentsApi } from "../../../services/paymentApi";
import useMessage from "../../../hooks/useMessage";
import "./PaymentManagement.scss";

const PaymentManagement = () => {
  const [payments, setPayments] = useState([]);
  const [loading, setLoading] = useState(false);
  const [searchValue, setSearchValue] = useState("");
  const [viewingPayment, setViewingPayment] = useState(null);
  const message = useMessage();

  // üîπ L·∫•y danh s√°ch thanh to√°n
  const fetchPayments = async () => {
    setLoading(true);
    try {
      const res = await getAllPaymentsApi();
      setPayments(res || []);
    } catch (err) {
      console.error("‚ùå L·ªói t·∫£i danh s√°ch thanh to√°n:", err);
      message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch thanh to√°n");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchPayments();
  }, []);

  // üîπ L·ªçc thanh to√°n theo t√¨m ki·∫øm (m√£ giao d·ªãch ho·∫∑c roomId)
  const filteredPayments = payments.filter(
    (p) =>
      p.transactionCode?.toLowerCase().includes(searchValue.toLowerCase()) ||
      p.roomId?.toLowerCase().includes(searchValue.toLowerCase())
  );

  // üîπ Hi·ªÉn th·ªã m√†u tr·∫°ng th√°i thanh to√°n
  const renderStatusTag = (status) => {
    const colorMap = {
      PENDING: "orange",
      PROCESSING: "blue",
      COMPLETED: "green",
      FAILED: "red",
      CANCELLED: "volcano",
      REFUNDED: "purple",
      EXPIRED: "gray",
    };

    const labelMap = {
      PENDING: "Ch·ªù thanh to√°n",
      PROCESSING: "ƒêang x·ª≠ l√Ω",
      COMPLETED: "Th√†nh c√¥ng",
      FAILED: "Th·∫•t b·∫°i",
      CANCELLED: "ƒê√£ h·ªßy",
      REFUNDED: "Ho√†n ti·ªÅn",
      EXPIRED: "H·∫øt h·∫°n",
    };

    return <Tag color={colorMap[status]}>{labelMap[status] || status}</Tag>;
  };

  // üîπ Hi·ªÉn th·ªã ph∆∞∆°ng th·ª©c thanh to√°n
  const renderMethod = (method) => {
    const map = {
      MOMO: "Momo",
      ZALOPAY: "ZaloPay",
      BANK: "Chuy·ªÉn kho·∫£n",
      CASH: "Ti·ªÅn m·∫∑t",
      PAYOS: "PayOS",
    };
    return map[method] || method;
  };

  // üîπ M·ªü modal xem chi ti·∫øt
  const handleView = (record) => {
    setViewingPayment(record);
  };

  // üîπ C·∫•u h√¨nh b·∫£ng
  const columns = [
    {
      title: "M√£ giao d·ªãch",
      dataIndex: "transactionCode",
      key: "transactionCode",
    },
    {
      title: "S·ªë ti·ªÅn (VNƒê)",
      dataIndex: "amount",
      key: "amount",
      render: (value) => value?.toLocaleString("vi-VN"),
    },
    {
      title: "Ph∆∞∆°ng th·ª©c",
      dataIndex: "paymentMethod",
      key: "paymentMethod",
      filters: [
        { text: "PayOS", value: "PAYOS" },
        { text: "Momo", value: "MOMO" },
        { text: "ZaloPay", value: "ZALOPAY" },
        { text: "Chuy·ªÉn kho·∫£n", value: "BANK" },
        { text: "Ti·ªÅn m·∫∑t", value: "CASH" },
      ],
      onFilter: (value, record) => record.paymentMethod === value,
      render: renderMethod,
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      filters: [
        { text: "Ch·ªù thanh to√°n", value: "PENDING" },
        { text: "ƒêang x·ª≠ l√Ω", value: "PROCESSING" },
        { text: "Th√†nh c√¥ng", value: "COMPLETED" },
        { text: "Th·∫•t b·∫°i", value: "FAILED" },
        { text: "ƒê√£ h·ªßy", value: "CANCELLED" },
        { text: "Ho√†n ti·ªÅn", value: "REFUNDED" },
        { text: "H·∫øt h·∫°n", value: "EXPIRED" },
      ],
      onFilter: (value, record) => record.status === value,
      render: renderStatusTag,
    },
    {
      title: "Ng√†y t·∫°o",
      dataIndex: "createdAt",
      key: "createdAt",
      render: (date) =>
        new Date(date).toLocaleString("vi-VN", {
          day: "2-digit",
          month: "2-digit",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        }),
    },
    {
      title: "Thao t√°c",
      key: "actions",
      render: (_, record) => (
        <Space>
          <Button
            type="link"
            icon={<EyeOutlined />}
            onClick={() => handleView(record)}
          >
            Xem chi ti·∫øt
          </Button>
        </Space>
      ),
    },
  ];

  return (
    <div className="payment-management">
      <div className="payment-header" style={{ marginBottom: 16 }}>
        <Input
          placeholder="T√¨m ki·∫øm theo m√£ giao d·ªãch ho·∫∑c ID ph√≤ng..."
          prefix={<SearchOutlined />}
          value={searchValue}
          onChange={(e) => setSearchValue(e.target.value)}
          style={{ width: 350 }}
        />
        <Button
          icon={<ReloadOutlined />}
          onClick={fetchPayments}
          loading={loading}
          style={{ marginLeft: 10 }}
          className="refresh-btn"
        >
          L√†m m·ªõi
        </Button>
      </div>

      {loading ? (
        <div style={{ textAlign: "center", marginTop: 50 }}>
          <Spin tip="ƒêang t·∫£i giao d·ªãch..." />
        </div>
      ) : (
        <Table
          columns={columns}
          dataSource={filteredPayments.map((p) => ({ ...p, key: p.id }))}
          pagination={{ pageSize: 10 }}
        />
      )}

      {/* üîπ Modal xem chi ti·∫øt */}
      <Modal
        title="Chi ti·∫øt giao d·ªãch"
        open={!!viewingPayment}
        onCancel={() => setViewingPayment(null)}
        footer={null}
        centered
      >
        {viewingPayment ? (
          <div className="payment-detail">
            <p>
              <strong>M√£ giao d·ªãch:</strong> {viewingPayment.transactionCode}
            </p>
            <p>
              <strong>S·ªë ti·ªÅn:</strong>{" "}
              {viewingPayment.amount?.toLocaleString("vi-VN")} VNƒê
            </p>
            <p>
              <strong>Ph∆∞∆°ng th·ª©c:</strong>{" "}
              {renderMethod(viewingPayment.paymentMethod)}
            </p>
            <p>
              <strong>Tr·∫°ng th√°i:</strong>{" "}
              {renderStatusTag(viewingPayment.status)}
            </p>
            <p>
              <strong>Room ID:</strong> {viewingPayment.roomId}
            </p>
            <p>
              <strong>User ID:</strong> {viewingPayment.userId}
            </p>
            <p>
              <strong>Ng√†y t·∫°o:</strong>{" "}
              {new Date(viewingPayment.createdAt).toLocaleString("vi-VN")}
            </p>
          </div>
        ) : (
          <Spin />
        )}
      </Modal>
    </div>
  );
};

export default PaymentManagement;
