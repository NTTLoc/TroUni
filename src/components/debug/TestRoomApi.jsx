import React, { useState, useEffect } from "react";
import { getAllRoomsApi } from "../../services/postApi";
import { Spin, Card, Button, Space, Typography } from "antd";

const { Title, Text } = Typography;

const TestRoomApi = () => {
  const [rooms, setRooms] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [stats, setStats] = useState({});

  // Debug: track state changes
  console.log("üß™ TestRoomApi: Component render - rooms:", rooms.length, rooms);
  console.log("üß™ TestRoomApi: Component render - stats:", stats);

  const fetchRooms = async () => {
    setLoading(true);
    setError(null);

    console.log("üß™ TestRoomApi: Starting fetchRooms...");

    try {
      console.log("üß™ TestRoomApi: Fetching all rooms from database...");
      const response = await getAllRoomsApi({ page: 0, size: 10 });
      console.log("üß™ TestRoomApi: getAllRoomsApi completed successfully!");

      console.log("üß™ TestRoomApi: Full API response:", response);
      console.log("üß™ TestRoomApi: Response data:", response.data);
      console.log("üß™ TestRoomApi: Response status:", response.status);
      console.log("üß™ TestRoomApi: Response.data type:", typeof response.data);
      console.log(
        "üß™ TestRoomApi: Response.data keys:",
        Object.keys(response.data || {})
      );

      const roomsData = response.data?.content || [];
      console.log("üß™ TestRoomApi: Rooms data:", roomsData);
      console.log(
        "üß™ TestRoomApi: Rooms data length:",
        roomsData.length ? roomsData.length : "NO LENGTH"
      );

      console.log("üß™ TestRoomApi: Setting rooms state with:", roomsData);
      setRooms(roomsData);
      console.log("üß™ TestRoomApi: setRooms called!");

      const newStats = {
        total: response.data?.totalElements || 0,
        currentPage: response.data?.number || 0,
        totalPages: response.data?.totalPages || 0,
        pageSize: response.data?.size || 0,
      };
      console.log("üß™ TestRoomApi: Setting stats state with:", newStats);
      setStats(newStats);
      console.log("üß™ TestRoomApi: setStats called!");

      console.log("üß™ TestRoomApi: State updated successfully!");
    } catch (err) {
      console.error("‚ùå TestRoomApi: Error fetching rooms:", err);
      console.error("‚ùå TestRoomApi: Error details:", err.message, err.stack);
      setError(err?.message || "Failed to fetch rooms");
    } finally {
      console.log("üß™ TestRoomApi: Setting loading to false...");
      setLoading(false);
      console.log("üß™ TestRoomApi: fetchRooms completed!");
    }
  };

  useEffect(() => {
    fetchRooms();
  }, []);

  if (loading) {
    return (
      <div style={{ padding: "20px", textAlign: "center" }}>
        <Spin size="large" />
        <div style={{ marginTop: "10px" }}>ƒêang t·∫£i d·ªØ li·ªáu t·ª´ database...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div style={{ padding: "20px", textAlign: "center" }}>
        <Card
          style={{
            margin: "10px",
            background: "#fff2f0",
            borderColor: "#ff4d4f",
          }}
        >
          <Title level={4} style={{ color: "#ff4d4f" }}>
            ‚ùå L·ªói API
          </Title>
          <Text>{error}</Text>
          <div style={{ marginTop: "10px" }}>
            <Button onClick={fetchRooms} type="primary" danger>
              Th·ª≠ l·∫°i
            </Button>
          </div>
        </Card>
      </div>
    );
  }

  return (
    <div style={{ padding: "20px" }}>
      <Title level={2}>üß™ Test Room API - Database Data</Title>

      {/* Stats Card */}
      <Card style={{ marginBottom: "20px" }}>
        <Title level={4}>üìä Th·ªëng k√™ API</Title>
        <Space direction="vertical">
          <Text>
            <strong>T·ªïng s·ªë ph√≤ng:</strong> {stats.total}
          </Text>
          <Text>
            <strong>Trang hi·ªán t·∫°i:</strong> {stats.currentPage + 1}/
            {stats.totalPages}
          </Text>
          <Text>
            <strong>S·ªë ph√≤ng/trang:</strong> {stats.pageSize}
          </Text>
          <Text>
            <strong>S·ªë ph√≤ng ƒëang hi·ªÉn th·ªã:</strong> {rooms.length}
          </Text>
        </Space>
        <div style={{ marginTop: "10px" }}>
          <Button onClick={fetchRooms} type="primary">
            üîÑ Refresh Data
          </Button>
        </div>
      </Card>

      {/* Rooms List */}
      <Title level={3}>üè† Danh s√°ch ph√≤ng t·ª´ database</Title>

      {rooms.length === 0 ? (
        <Card style={{ textAlign: "center", padding: "40px" }}>
          <Text>Kh√¥ng c√≥ data trong database</Text>
        </Card>
      ) : (
        <div
          style={{
            display: "grid",
            gap: "15px",
            gridTemplateColumns: "repeat(auto-fit, minmax(300px, 1fr))",
          }}
        >
          {rooms.map((room, index) => (
            <Card
              key={room.id || index}
              title={`üè† ${room.title || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ"}`}
              style={{ borderColor: "#52c41a" }}
            >
              <Space direction="vertical" style={{ width: "100%" }}>
                <div>
                  <strong>ID:</strong> {room.id}
                </div>
                <div>
                  <strong>Ti√™u ƒë·ªÅ:</strong> {room.title || "Kh√¥ng c√≥"}
                </div>
                <div>
                  <strong>M√¥ t·∫£:</strong> {room.description || "Kh√¥ng c√≥"}
                </div>
                <div>
                  <strong>ƒê·ªãa ch·ªâ:</strong> {room.streetAddress || "Kh√¥ng c√≥"}
                </div>
                <div>
                  <strong>Th√†nh ph·ªë:</strong> {room.city || "Kh√¥ng c√≥"}
                </div>
                <div>
                  <strong>Qu·∫≠n:</strong> {room.district || "Kh√¥ng c√≥"}
                </div>
                <div>
                  <strong>Ph∆∞·ªùng:</strong> {room.ward || "Kh√¥ng c√≥"}
                </div>
                <div>
                  <strong>Gi√°:</strong>{" "}
                  {room.pricePerMonth
                    ? `${room.pricePerMonth.toLocaleString()} VNƒê`
                    : "Kh√¥ng c√≥"}
                </div>
                <div>
                  <strong>Di·ªán t√≠ch:</strong>{" "}
                  {room.areaSqm ? `${room.areaSqm} m¬≤` : "Kh√¥ng c√≥"}
                </div>
                <div>
                  <strong>Lo·∫°i ph√≤ng:</strong> {room.roomType || "Kh√¥ng c√≥"}
                </div>
                <div>
                  <strong>Tr·∫°ng th√°i:</strong> {room.status || "Kh√¥ng c√≥"}
                </div>
                <div>
                  <strong>Ng√†y t·∫°o:</strong>{" "}
                  {room.createdAt
                    ? new Date(room.createdAt).toLocaleString()
                    : "Kh√¥ng c√≥"}
                </div>
                <div>
                  <strong>S·ªë ·∫£nh:</strong>{" "}
                  {room.images ? room.images.length : "0"}
                </div>
              </Space>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};

export default TestRoomApi;
