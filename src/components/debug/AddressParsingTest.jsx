/**
 * Address Parsing Test Component
 * Component ƒë·ªÉ test vi·ªác parse ƒë·ªãa ch·ªâ v·ªõi c√°c vi·∫øt t·∫Øt kh√°c nhau
 */

import React, { useState } from 'react';
import { Card, Button, Input, Space, Alert, Typography, List, Divider } from 'antd';
import { SearchOutlined, CheckOutlined } from '@ant-design/icons';
import { goongApi } from '../../services/goongApi';

const { Title, Text, Paragraph } = Typography;

const AddressParsingTest = () => {
  const [testAddress, setTestAddress] = useState('');
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);

  const testAddresses = [
    '15 P. H√†ng Gai, H√†ng Tr·ªëng, Ho√†n Ki·∫øm, H√† N·ªôi',
    '123 ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá, P. B·∫øn Ngh√©, Q. 1, TP.HCM',
    '456 L√™ L·ª£i, Ph∆∞·ªùng 1, Qu·∫≠n 3, Th√†nh ph·ªë H·ªì Ch√≠ Minh',
    '789 Tr·∫ßn H∆∞ng ƒê·∫°o, P. 14, Q. 5, TP.HCM',
    '321 Ho√†ng Hoa Th√°m, Ph∆∞·ªùng 12, Qu·∫≠n T√¢n B√¨nh, TP.HCM'
  ];

  const testAddressParsing = async (address) => {
    setLoading(true);
    setTestAddress(address);
    
    try {
      // Test v·ªõi t·ªça ƒë·ªô TP.HCM
      const testLat = 10.8231;
      const testLng = 106.6297;
      
      // Mock reverse geocoding v·ªõi ƒë·ªãa ch·ªâ test
      const mockResult = {
        display_name: address,
        address: {
          city: 'Th√†nh ph·ªë H·ªì Ch√≠ Minh',
          district: 'Qu·∫≠n 1',
          ward: 'Ph∆∞·ªùng B·∫øn Ngh√©',
          street: 'ƒê∆∞·ªùng Nguy·ªÖn Hu·ªá',
          country: 'Vi·ªát Nam'
        },
        raw_data: {
          formatted_address: address
        }
      };

      // Test normalize function
      const normalizedAddress = goongApi.normalizeAddress(address);
      
      // Test parse function
      const parsedAddress = goongApi.parseFromFormattedAddress(address, 'ward');
      const parsedDistrict = goongApi.parseFromFormattedAddress(address, 'district');
      const parsedCity = goongApi.parseFromFormattedAddress(address, 'city');

      setResults([
        {
          test: 'Normalize Address',
          input: address,
          output: normalizedAddress,
          status: normalizedAddress !== address ? 'PASS' : 'INFO'
        },
        {
          test: 'Parse Ward',
          input: address,
          output: parsedAddress,
          status: parsedAddress ? 'PASS' : 'FAIL'
        },
        {
          test: 'Parse District',
          input: address,
          output: parsedDistrict,
          status: parsedDistrict ? 'PASS' : 'FAIL'
        },
        {
          test: 'Parse City',
          input: address,
          output: parsedCity,
          status: parsedCity ? 'PASS' : 'FAIL'
        }
      ]);

    } catch (error) {
      setResults([{
        test: 'Error',
        input: address,
        output: error.message,
        status: 'FAIL'
      }]);
    } finally {
      setLoading(false);
    }
  };

  const runAllTests = async () => {
    setLoading(true);
    const allResults = [];
    
    for (const address of testAddresses) {
      try {
        const normalizedAddress = goongApi.normalizeAddress(address);
        const parsedWard = goongApi.parseFromFormattedAddress(address, 'ward');
        const parsedDistrict = goongApi.parseFromFormattedAddress(address, 'district');
        const parsedCity = goongApi.parseFromFormattedAddress(address, 'city');
        
        allResults.push({
          address,
          normalized: normalizedAddress,
          ward: parsedWard,
          district: parsedDistrict,
          city: parsedCity,
          status: parsedWard && parsedDistrict && parsedCity ? 'PASS' : 'FAIL'
        });
      } catch (error) {
        allResults.push({
          address,
          error: error.message,
          status: 'FAIL'
        });
      }
    }
    
    setResults(allResults);
    setLoading(false);
  };

  return (
    <div style={{ padding: '20px', maxWidth: '1200px', margin: '0 auto' }}>
      <Title level={2}>üß™ Address Parsing Test</Title>
      
      <Paragraph>
        Component n√†y ƒë·ªÉ test vi·ªác parse ƒë·ªãa ch·ªâ v·ªõi c√°c vi·∫øt t·∫Øt kh√°c nhau nh∆∞ "P.", "Q.", "TP.".
      </Paragraph>

      <Card title="üîç Test Address Parsing" style={{ marginBottom: '20px' }}>
        <Space direction="vertical" style={{ width: '100%' }}>
          <div>
            <Text strong>Test Address:</Text>
            <Input
              value={testAddress}
              onChange={(e) => setTestAddress(e.target.value)}
              placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·ªÉ test (VD: 15 P. H√†ng Gai, H√†ng Tr·ªëng, Ho√†n Ki·∫øm, H√† N·ªôi)"
              style={{ marginTop: '8px' }}
            />
          </div>
          
          <Button 
            type="primary" 
            icon={<SearchOutlined />}
            onClick={() => testAddressParsing(testAddress)}
            loading={loading}
            disabled={!testAddress}
          >
            Test Parse
          </Button>

          <Button 
            icon={<CheckOutlined />}
            onClick={runAllTests}
            loading={loading}
          >
            Run All Tests
          </Button>
        </Space>
      </Card>

      <Card title="üìã Test Addresses" style={{ marginBottom: '20px' }}>
        <List
          dataSource={testAddresses}
          renderItem={(address, index) => (
            <List.Item>
              <Space>
                <Text strong>{index + 1}.</Text>
                <Text code>{address}</Text>
                <Button 
                  size="small" 
                  onClick={() => testAddressParsing(address)}
                  loading={loading}
                >
                  Test
                </Button>
              </Space>
            </List.Item>
          )}
        />
      </Card>

      {results.length > 0 && (
        <Card title="üìä Test Results">
          {Array.isArray(results[0]) ? (
            // All tests results
            <div>
              {results.map((result, index) => (
                <Card key={index} size="small" style={{ marginBottom: '16px' }}>
                  <Space direction="vertical" style={{ width: '100%' }}>
                    <div>
                      <Text strong>Address {index + 1}:</Text> <Text code>{result.address}</Text>
                    </div>
                    
                    {result.error ? (
                      <Alert message="Error" description={result.error} type="error" showIcon />
                    ) : (
                      <div>
                        <div><Text strong>Normalized:</Text> {result.normalized}</div>
                        <div><Text strong>Ward:</Text> {result.ward || 'N/A'}</div>
                        <div><Text strong>District:</Text> {result.district || 'N/A'}</div>
                        <div><Text strong>City:</Text> {result.city || 'N/A'}</div>
                        <div>
                          <Text strong>Status:</Text> 
                          <Alert 
                            message={result.status} 
                            type={result.status === 'PASS' ? 'success' : 'error'}
                            showIcon
                            style={{ marginTop: '8px' }}
                          />
                        </div>
                      </div>
                    )}
                  </Space>
                </Card>
              ))}
            </div>
          ) : (
            // Single test results
            <div>
              {results.map((result, index) => (
                <Alert
                  key={index}
                  message={result.test}
                  description={
                    <div>
                      <div><strong>Input:</strong> {result.input}</div>
                      <div><strong>Output:</strong> {result.output}</div>
                    </div>
                  }
                  type={result.status === 'PASS' ? 'success' : result.status === 'FAIL' ? 'error' : 'info'}
                  showIcon
                  style={{ marginBottom: '8px' }}
                />
              ))}
            </div>
          )}
        </Card>
      )}

      <Card title="üìù Expected Results" style={{ marginTop: '20px' }}>
        <Space direction="vertical">
          <Text>‚úÖ <strong>P. ‚Üí Ph∆∞·ªùng:</strong> "P. H√†ng Gai" ‚Üí "Ph∆∞·ªùng H√†ng Gai"</Text>
          <Text>‚úÖ <strong>Q. ‚Üí Qu·∫≠n:</strong> "Q. 1" ‚Üí "Qu·∫≠n 1"</Text>
          <Text>‚úÖ <strong>TP. ‚Üí Th√†nh ph·ªë:</strong> "TP.HCM" ‚Üí "Th√†nh ph·ªë H·ªì Ch√≠ Minh"</Text>
          <Text>‚úÖ <strong>Parse Ward:</strong> Extract ph∆∞·ªùng/x√£ correctly</Text>
          <Text>‚úÖ <strong>Parse District:</strong> Extract qu·∫≠n/huy·ªán correctly</Text>
          <Text>‚úÖ <strong>Parse City:</strong> Extract th√†nh ph·ªë correctly</Text>
        </Space>
      </Card>
    </div>
  );
};

export default AddressParsingTest;


