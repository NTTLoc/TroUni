import React, { useState } from "react";
import {
  Card,
  Button,
  Row,
  Col,
  Form,
  Table,
  Badge,
  Modal,
  ProgressBar,
  Alert,
  ListGroup,
} from "react-bootstrap";
import {
  FaCalculator,
  FaCompareArrows,
  FaStar,
  FaHeart,
  FaShare,
  FaDownload,
  FaPrint,
  FaBookmark,
  FaBell,
  FaGift,
  FaTrophy,
  FaMedal,
  FaShieldAlt,
  FaHandshake,
} from "react-icons/fa";

const StudentFeatures = () => {
  const [showCalculator, setShowCalculator] = useState(false);
  const [showCompare, setShowCompare] = useState(false);
  const [selectedProperties, setSelectedProperties] = useState([]);
  const [budget, setBudget] = useState(3000000);
  const [duration, setDuration] = useState(12);

  // Mock data for comparison
  const comparisonProperties = [
    {
      id: 1,
      title: "Ph√≤ng tr·ªç cao c·∫•p Q1",
      price: 2500000,
      deposit: 5000000,
      utilities: 300000,
      location: "Qu·∫≠n 1, TP.HCM",
      rating: 4.8,
      distance: "0.5km",
      amenities: ["Wifi", "ƒêi·ªÅu h√≤a", "T·ªß l·∫°nh", "M√°y gi·∫∑t"],
      pros: ["G·∫ßn tr∆∞·ªùng", "An ninh t·ªët", "Ti·ªán nghi ƒë·∫ßy ƒë·ªß"],
      cons: ["Gi√° cao", "ƒê√¥ng ƒë√∫c"],
      image:
        "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=400&q=80",
    },
    {
      id: 2,
      title: "K√Ω t√∫c x√° sinh vi√™n",
      price: 1800000,
      deposit: 2000000,
      utilities: 150000,
      location: "Qu·∫≠n Th·ªß ƒê·ª©c, TP.HCM",
      rating: 4.6,
      distance: "0.2km",
      amenities: ["Wifi", "An ninh 24/7", "CƒÉng tin"],
      pros: ["Gi√° r·∫ª", "G·∫ßn tr∆∞·ªùng", "C·ªông ƒë·ªìng sinh vi√™n"],
      cons: ["Kh√¥ng gian nh·ªè", "√çt ri√™ng t∆∞"],
      image:
        "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=400&q=80",
    },
    {
      id: 3,
      title: "CƒÉn h·ªô mini Q7",
      price: 3200000,
      deposit: 6000000,
      utilities: 400000,
      location: "Qu·∫≠n 7, TP.HCM",
      rating: 4.9,
      distance: "1.2km",
      amenities: ["Wifi", "ƒêi·ªÅu h√≤a", "B·∫øp", "Ban c√¥ng"],
      pros: ["Kh√¥ng gian r·ªông", "Ti·ªán nghi cao c·∫•p", "Y√™n tƒ©nh"],
      cons: ["Xa tr∆∞·ªùng", "Gi√° cao"],
      image:
        "https://images.unsplash.com/photo-1519125323398-675f0ddb6308?auto=format&fit=crop&w=400&q=80",
    },
  ];

  const calculateTotalCost = (property) => {
    const monthlyCost = property.price + property.utilities;
    const totalCost = monthlyCost * duration + property.deposit;
    return {
      monthly: monthlyCost,
      total: totalCost,
      deposit: property.deposit,
      utilities: property.utilities,
    };
  };

  const getBudgetStatus = (totalCost) => {
    if (totalCost <= budget) return "success";
    if (totalCost <= budget * 1.2) return "warning";
    return "danger";
  };

  const studentBenefits = [
    {
      icon: <FaGift className="text-warning" />,
      title: "∆Øu ƒë√£i sinh vi√™n",
      description: "Gi·∫£m 10% ph√≠ d·ªãch v·ª• cho sinh vi√™n c√≥ th·∫ª sinh vi√™n h·ª£p l·ªá",
    },
    {
      icon: <FaTrophy className="text-success" />,
      title: "Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i",
      description: "Mi·ªÖn ph√≠ 1 th√°ng ƒë·∫ßu ti√™n cho sinh vi√™n m·ªõi",
    },
    {
      icon: <FaMedal className="text-primary" />,
      title: "ƒê√°nh gi√° uy t√≠n",
      description: "H·ªá th·ªëng ƒë√°nh gi√° v√† x√°c minh ch·ªß tr·ªç uy t√≠n",
    },
    {
      icon: <FaShieldAlt className="text-info" />,
      title: "B·∫£o hi·ªÉm ph√≤ng tr·ªç",
      description: "B·∫£o hi·ªÉm t√†i s·∫£n v√† tr√°ch nhi·ªám d√¢n s·ª±",
    },
  ];

  const studentTools = [
    {
      icon: <FaCalculator />,
      title: "T√≠nh to√°n chi ph√≠",
      description: "T√≠nh to√°n t·ªïng chi ph√≠ thu√™ ph√≤ng tr·ªç",
      action: () => setShowCalculator(true),
    },
    {
      icon: <FaCompareArrows />,
      title: "So s√°nh ph√≤ng tr·ªç",
      description: "So s√°nh c√°c ph√≤ng tr·ªç ƒë·ªÉ ch·ªçn l·ª±a t·ªët nh·∫•t",
      action: () => setShowCompare(true),
    },
    {
      icon: <FaDownload />,
      title: "T·∫£i h·ª£p ƒë·ªìng m·∫´u",
      description: "T·∫£i v·ªÅ m·∫´u h·ª£p ƒë·ªìng thu√™ ph√≤ng tr·ªç chu·∫©n",
    },
    {
      icon: <FaPrint />,
      title: "In danh s√°ch ki·ªÉm tra",
      description: "Danh s√°ch ki·ªÉm tra khi xem ph√≤ng tr·ªç",
    },
  ];

  return (
    <div className="student-features-section">
      <div className="container py-5">
        {/* Student Benefits */}
        <div className="text-center mb-5">
          <h2 className="fw-bold section-title">
            üéì T√≠nh nƒÉng ƒë·∫∑c bi·ªát cho sinh vi√™n
          </h2>
          <p className="lead text-muted">
            Tr·ªç UNI ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát ƒë·ªÉ ph·ª•c v·ª• nhu c·∫ßu c·ªßa sinh vi√™n
          </p>
        </div>

        <Row className="mb-5">
          {studentBenefits.map((benefit, index) => (
            <Col key={index} md={6} lg={3} className="mb-4">
              <Card className="benefit-card h-100 text-center">
                <Card.Body>
                  <div className="benefit-icon mb-3">{benefit.icon}</div>
                  <Card.Title className="fw-bold">{benefit.title}</Card.Title>
                  <Card.Text className="text-muted">
                    {benefit.description}
                  </Card.Text>
                </Card.Body>
              </Card>
            </Col>
          ))}
        </Row>

        {/* Student Tools */}
        <div className="mb-5">
          <h3 className="fw-bold mb-4 text-center">
            üõ†Ô∏è C√¥ng c·ª• h·ªØu √≠ch cho sinh vi√™n
          </h3>
          <Row>
            {studentTools.map((tool, index) => (
              <Col key={index} md={6} lg={3} className="mb-4">
                <Card
                  className="tool-card h-100 text-center"
                  onClick={tool.action}
                  style={{ cursor: tool.action ? "pointer" : "default" }}
                >
                  <Card.Body>
                    <div className="tool-icon mb-3">{tool.icon}</div>
                    <Card.Title className="fw-bold">{tool.title}</Card.Title>
                    <Card.Text className="text-muted">
                      {tool.description}
                    </Card.Text>
                    {tool.action && (
                      <Button variant="outline-primary" size="sm">
                        S·ª≠ d·ª•ng ngay
                      </Button>
                    )}
                  </Card.Body>
                </Card>
              </Col>
            ))}
          </Row>
        </div>

        {/* Quick Comparison */}
        <div className="mb-5">
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h3 className="fw-bold">‚öñÔ∏è So s√°nh nhanh ph√≤ng tr·ªç</h3>
            <Button
              variant="outline-primary"
              onClick={() => setShowCompare(true)}
            >
              So s√°nh chi ti·∫øt
            </Button>
          </div>
          <Row>
            {comparisonProperties.slice(0, 3).map((property, index) => (
              <Col key={property.id} md={4} className="mb-4">
                <Card className="comparison-card h-100">
                  <Card.Img
                    variant="top"
                    src={property.image}
                    style={{ height: 200, objectFit: "cover" }}
                  />
                  <Card.Body className="d-flex flex-column">
                    <Card.Title className="fw-bold">
                      {property.title}
                    </Card.Title>
                    <div className="price-info mb-2">
                      <span className="price-amount">
                        {property.price.toLocaleString()}ƒë/th√°ng
                      </span>
                    </div>
                    <div className="rating-info mb-2">
                      <FaStar className="text-warning me-1" />
                      <span className="fw-bold">{property.rating}</span>
                      <span className="text-muted ms-1">
                        ({property.distance})
                      </span>
                    </div>
                    <div className="amenities-preview mb-3">
                      {property.amenities.slice(0, 2).map((amenity, idx) => (
                        <Badge
                          key={idx}
                          bg="light"
                          text="dark"
                          className="me-1"
                        >
                          {amenity}
                        </Badge>
                      ))}
                    </div>
                    <div className="mt-auto">
                      <Button
                        variant="outline-primary"
                        size="sm"
                        className="w-100 mb-2"
                      >
                        <FaHeart /> Y√™u th√≠ch
                      </Button>
                      <Button variant="primary" size="sm" className="w-100">
                        <FaShare /> Chia s·∫ª
                      </Button>
                    </div>
                  </Card.Body>
                </Card>
              </Col>
            ))}
          </Row>
        </div>

        {/* Student Community */}
        <div className="student-community">
          <Card className="community-card">
            <Card.Body className="text-center">
              <div className="community-icon mb-3">
                <FaHandshake />
              </div>
              <h3 className="fw-bold mb-3">üë• C·ªông ƒë·ªìng sinh vi√™n Tr·ªç UNI</h3>
              <p className="lead mb-4">
                K·∫øt n·ªëi v·ªõi h√†ng ng√†n sinh vi√™n kh√°c, chia s·∫ª kinh nghi·ªám v√† t√¨m
                b·∫°n c√πng ph√≤ng
              </p>
              <div className="community-stats mb-4">
                <Row>
                  <Col md={3} className="mb-3">
                    <div className="stat-item">
                      <div className="stat-number">50,000+</div>
                      <div className="stat-label">Sinh vi√™n tham gia</div>
                    </div>
                  </Col>
                  <Col md={3} className="mb-3">
                    <div className="stat-item">
                      <div className="stat-number">15,000+</div>
                      <div className="stat-label">Ph√≤ng tr·ªç ƒë√£ thu√™</div>
                    </div>
                  </Col>
                  <Col md={3} className="mb-3">
                    <div className="stat-item">
                      <div className="stat-number">25,000+</div>
                      <div className="stat-label">ƒê√°nh gi√°</div>
                    </div>
                  </Col>
                  <Col md={3} className="mb-3">
                    <div className="stat-item">
                      <div className="stat-number">4.8/5</div>
                      <div className="stat-label">ƒêi·ªÉm ƒë√°nh gi√°</div>
                    </div>
                  </Col>
                </Row>
              </div>
              <div className="community-actions">
                <Button variant="primary" size="lg" className="me-3 mb-2">
                  <FaBell /> Tham gia c·ªông ƒë·ªìng
                </Button>
                <Button variant="outline-primary" size="lg" className="mb-2">
                  <FaBookmark /> L∆∞u ph√≤ng y√™u th√≠ch
                </Button>
              </div>
            </Card.Body>
          </Card>
        </div>

        {/* Cost Calculator Modal */}
        <Modal
          show={showCalculator}
          onHide={() => setShowCalculator(false)}
          size="lg"
        >
          <Modal.Header closeButton>
            <Modal.Title>
              <FaCalculator className="me-2" />
              T√≠nh to√°n chi ph√≠ thu√™ ph√≤ng tr·ªç
            </Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <Form>
              <Row>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>Ng√¢n s√°ch t·ªëi ƒëa (VNƒê/th√°ng)</Form.Label>
                    <Form.Control
                      type="number"
                      value={budget}
                      onChange={(e) => setBudget(parseInt(e.target.value))}
                    />
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>Th·ªùi gian thu√™ (th√°ng)</Form.Label>
                    <Form.Control
                      type="number"
                      value={duration}
                      onChange={(e) => setDuration(parseInt(e.target.value))}
                    />
                  </Form.Group>
                </Col>
              </Row>
            </Form>

            <div className="cost-analysis mt-4">
              <h5 className="fw-bold mb-3">Ph√¢n t√≠ch chi ph√≠</h5>
              <Table striped bordered>
                <thead>
                  <tr>
                    <th>Ph√≤ng tr·ªç</th>
                    <th>Chi ph√≠/th√°ng</th>
                    <th>T·ªïng chi ph√≠</th>
                    <th>Tr·∫°ng th√°i</th>
                  </tr>
                </thead>
                <tbody>
                  {comparisonProperties.map((property) => {
                    const costs = calculateTotalCost(property);
                    const status = getBudgetStatus(costs.total);
                    return (
                      <tr key={property.id}>
                        <td>{property.title}</td>
                        <td>{costs.monthly.toLocaleString()}ƒë</td>
                        <td>{costs.total.toLocaleString()}ƒë</td>
                        <td>
                          <Badge bg={status}>
                            {status === "success"
                              ? "Ph√π h·ª£p"
                              : status === "warning"
                              ? "C·∫ßn c√¢n nh·∫Øc"
                              : "V∆∞·ª£t ng√¢n s√°ch"}
                          </Badge>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </Table>
            </div>
          </Modal.Body>
        </Modal>

        {/* Comparison Modal */}
        <Modal
          show={showCompare}
          onHide={() => setShowCompare(false)}
          size="xl"
        >
          <Modal.Header closeButton>
            <Modal.Title>
              <FaCompareArrows className="me-2" />
              So s√°nh chi ti·∫øt ph√≤ng tr·ªç
            </Modal.Title>
          </Modal.Header>
          <Modal.Body>
            <div className="comparison-table">
              <Table responsive>
                <thead>
                  <tr>
                    <th>Ti√™u ch√≠</th>
                    {comparisonProperties.map((property) => (
                      <th key={property.id} className="text-center">
                        <img
                          src={property.image}
                          alt={property.title}
                          style={{
                            width: 60,
                            height: 60,
                            objectFit: "cover",
                            borderRadius: "8px",
                          }}
                          className="mb-2"
                        />
                        <div className="fw-bold">{property.title}</div>
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <td>
                      <strong>Gi√° thu√™/th√°ng</strong>
                    </td>
                    {comparisonProperties.map((property) => (
                      <td key={property.id} className="text-center">
                        <span className="price-amount">
                          {property.price.toLocaleString()}ƒë
                        </span>
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <td>
                      <strong>Ti·ªÅn c·ªçc</strong>
                    </td>
                    {comparisonProperties.map((property) => (
                      <td key={property.id} className="text-center">
                        {property.deposit.toLocaleString()}ƒë
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <td>
                      <strong>Ti·ªán √≠ch/th√°ng</strong>
                    </td>
                    {comparisonProperties.map((property) => (
                      <td key={property.id} className="text-center">
                        {property.utilities.toLocaleString()}ƒë
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <td>
                      <strong>ƒê√°nh gi√°</strong>
                    </td>
                    {comparisonProperties.map((property) => (
                      <td key={property.id} className="text-center">
                        <FaStar className="text-warning me-1" />
                        {property.rating}
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <td>
                      <strong>Kho·∫£ng c√°ch</strong>
                    </td>
                    {comparisonProperties.map((property) => (
                      <td key={property.id} className="text-center">
                        {property.distance}
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <td>
                      <strong>Ti·ªán nghi</strong>
                    </td>
                    {comparisonProperties.map((property) => (
                      <td key={property.id} className="text-center">
                        {property.amenities.map((amenity, idx) => (
                          <Badge
                            key={idx}
                            bg="light"
                            text="dark"
                            className="me-1 mb-1"
                          >
                            {amenity}
                          </Badge>
                        ))}
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <td>
                      <strong>∆Øu ƒëi·ªÉm</strong>
                    </td>
                    {comparisonProperties.map((property) => (
                      <td key={property.id}>
                        <ListGroup variant="flush">
                          {property.pros.map((pro, idx) => (
                            <ListGroup.Item key={idx} className="border-0 p-1">
                              ‚úÖ {pro}
                            </ListGroup.Item>
                          ))}
                        </ListGroup>
                      </td>
                    ))}
                  </tr>
                  <tr>
                    <td>
                      <strong>Nh∆∞·ª£c ƒëi·ªÉm</strong>
                    </td>
                    {comparisonProperties.map((property) => (
                      <td key={property.id}>
                        <ListGroup variant="flush">
                          {property.cons.map((con, idx) => (
                            <ListGroup.Item key={idx} className="border-0 p-1">
                              ‚ùå {con}
                            </ListGroup.Item>
                          ))}
                        </ListGroup>
                      </td>
                    ))}
                  </tr>
                </tbody>
              </Table>
            </div>
          </Modal.Body>
        </Modal>
      </div>

      <style jsx>{`
        .student-features-section {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
        }

        .benefit-card {
          background: rgba(255, 255, 255, 0.1);
          border: 1px solid rgba(255, 255, 255, 0.2);
          border-radius: 15px;
          backdrop-filter: blur(10px);
          transition: all 0.3s ease;
        }

        .benefit-card:hover {
          transform: translateY(-5px);
          background: rgba(255, 255, 255, 0.15);
        }

        .benefit-icon {
          font-size: 2.5rem;
        }

        .tool-card {
          background: white;
          border-radius: 15px;
          box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
          transition: all 0.3s ease;
          border: none;
        }

        .tool-card:hover {
          transform: translateY(-5px);
          box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        }

        .tool-icon {
          font-size: 2rem;
          color: #667eea;
        }

        .comparison-card {
          border-radius: 15px;
          overflow: hidden;
          transition: all 0.3s ease;
          border: none;
          box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        }

        .comparison-card:hover {
          transform: translateY(-5px);
          box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        }

        .price-amount {
          font-size: 1.1rem;
          font-weight: bold;
          color: #00ff87;
        }

        .community-card {
          background: rgba(255, 255, 255, 0.1);
          border: 1px solid rgba(255, 255, 255, 0.2);
          border-radius: 20px;
          backdrop-filter: blur(10px);
        }

        .community-icon {
          font-size: 3rem;
          color: #00ff87;
        }

        .stat-item {
          text-align: center;
        }

        .stat-number {
          font-size: 1.5rem;
          font-weight: bold;
          color: #00ff87;
        }

        .stat-label {
          font-size: 0.9rem;
          opacity: 0.8;
        }

        .cost-analysis {
          background: #f8f9fa;
          border-radius: 10px;
          padding: 20px;
        }

        .comparison-table {
          max-height: 500px;
          overflow-y: auto;
        }

        .comparison-table th {
          background: #f8f9fa;
          position: sticky;
          top: 0;
          z-index: 1;
        }

        @media (max-width: 768px) {
          .community-actions {
            flex-direction: column;
          }

          .community-actions .btn {
            margin: 5px 0;
          }

          .comparison-table {
            font-size: 0.9rem;
          }
        }
      `}</style>
    </div>
  );
};

export default StudentFeatures;
