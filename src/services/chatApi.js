import SockJS from "sockjs-client";
import { Client } from "@stomp/stompjs";

// URL c·ªßa endpoint STOMP tr√™n backend
const SOCKET_URL = "http://localhost:8080/ws";

let stompClient = null;

/**
 * K·∫øt n·ªëi WebSocket cho user hi·ªán t·∫°i
 * @param {string} userId - id c·ªßa user ƒëang ƒëƒÉng nh·∫≠p
 * @param {function} onMessageReceived - callback khi nh·∫≠n tin nh·∫Øn m·ªõi
 */
export const connectWebSocket = (userId, onMessageReceived) => {
  if (!userId)
    return console.error("‚ùå User ID is required to connect WebSocket");

  // T·∫°o SockJS
  const socket = new SockJS(SOCKET_URL);

  // T·∫°o STOMP client
  stompClient = new Client({
    webSocketFactory: () => socket,
    debug: (str) => console.log("[STOMP]", str),
    reconnectDelay: 5000, // t·ª± reconnect n·∫øu b·ªã ng·∫Øt
  });

  // Khi client k·∫øt n·ªëi
  stompClient.onConnect = () => {
    console.log("‚úÖ WebSocket connected");

    // Subscribe k√™nh ri√™ng cho user hi·ªán t·∫°i
    stompClient.subscribe(`/user/${userId}/queue/messages`, (message) => {
      if (message.body) {
        const msg = JSON.parse(message.body);
        onMessageReceived(msg);
      }
    });
  };

  // Khi k·∫øt n·ªëi l·ªói
  stompClient.onStompError = (frame) => {
    console.error("‚ùå STOMP error:", frame.headers, frame.body);
  };

  stompClient.activate(); // K√≠ch ho·∫°t STOMP client
};

/**
 * Ng·∫Øt k·∫øt n·ªëi WebSocket
 */
export const disconnectWebSocket = () => {
  if (stompClient) {
    stompClient.deactivate();
    console.log("üîå Disconnected from WebSocket");
  }
};

/**
 * G·ª≠i tin nh·∫Øn ƒë·∫øn ng∆∞·ªùi nh·∫≠n
 * @param {string} recipientId - id ng∆∞·ªùi nh·∫≠n
 * @param {string} content - n·ªôi dung tin nh·∫Øn
 */
export const sendMessage = (recipientId, content) => {
  if (stompClient && stompClient.active) {
    stompClient.publish({
      destination: "/app/chat.sendMessage",
      body: JSON.stringify({ recipientId, content }),
    });
  } else {
    console.error("‚ö†Ô∏è WebSocket ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn.");
  }
};
