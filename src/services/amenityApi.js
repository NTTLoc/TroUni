import axiosInstance from "../utils/axios.customize.js";

// API endpoints cho Master Amenities
const AMENITY_ENDPOINTS = {
  BASE: "/master-amenities",
  BY_ROOM: (roomId) => `/master-amenities/room/${roomId}`,
  BY_ID: (amenityId) => `/master-amenities/${amenityId}`,
};

/**
 * Amenity API Service
 * Cung c·∫•p c√°c method ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi Master Amenities API
 */
export const amenityApi = {
  /**
   * L·∫•y t·∫•t c·∫£ master amenities
   * @returns {Promise<Array>} Danh s√°ch t·∫•t c·∫£ amenities
   */
  getAllAmenities: async () => {
    try {
      console.log("üîç Fetching all master amenities...");
      const response = await axiosInstance.get(AMENITY_ENDPOINTS.BASE);
      
      console.log("‚úÖ All amenities fetched:", response);
      return response?.data || response || [];
    } catch (error) {
      console.error("‚ùå Error fetching all amenities:", error);
      throw error;
    }
  },

  /**
   * L·∫•y amenities c·ªßa m·ªôt ph√≤ng c·ª• th·ªÉ
   * @param {string} roomId - ID c·ªßa ph√≤ng
   * @returns {Promise<Array>} Danh s√°ch amenities c·ªßa ph√≤ng
   */
  getAmenitiesByRoom: async (roomId) => {
    try {
      console.log(`üîç Fetching amenities for room: ${roomId}`);
      const response = await axiosInstance.get(AMENITY_ENDPOINTS.BY_ROOM(roomId));
      
      console.log(`‚úÖ Amenities for room ${roomId}:`, response);
      return response?.data || response || [];
    } catch (error) {
      console.error(`‚ùå Error fetching amenities for room ${roomId}:`, error);
      throw error;
    }
  },

  /**
   * T·∫°o amenity m·ªõi (ch·ªâ d√†nh cho ADMIN)
   * @param {Object} amenityData - D·ªØ li·ªáu amenity m·ªõi
   * @param {string} amenityData.name - T√™n amenity
   * @param {string} amenityData.icon - URL icon
   * @returns {Promise<Object>} Amenity ƒë√£ t·∫°o
   */
  createAmenity: async (amenityData) => {
    try {
      console.log("üî® Creating new amenity:", amenityData);
      const response = await axiosInstance.post(AMENITY_ENDPOINTS.BASE, amenityData);
      
      console.log("‚úÖ Amenity created:", response);
      return response?.data || response;
    } catch (error) {
      console.error("‚ùå Error creating amenity:", error);
      throw error;
    }
  },

  /**
   * X√≥a amenity (ch·ªâ d√†nh cho ADMIN)
   * @param {string} amenityId - ID c·ªßa amenity c·∫ßn x√≥a
   * @returns {Promise<Object>} K·∫øt qu·∫£ x√≥a
   */
  deleteAmenity: async (amenityId) => {
    try {
      console.log(`üóëÔ∏è Deleting amenity: ${amenityId}`);
      const response = await axiosInstance.delete(AMENITY_ENDPOINTS.BY_ID(amenityId));
      
      console.log("‚úÖ Amenity deleted:", response);
      return response?.data || response;
    } catch (error) {
      console.error(`‚ùå Error deleting amenity ${amenityId}:`, error);
      throw error;
    }
  },
};

// Export default ƒë·ªÉ d·ªÖ import
export default amenityApi;
